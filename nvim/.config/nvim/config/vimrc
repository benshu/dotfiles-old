" Runtime and Plugins
" -------------------------------------------------

" Set main configuration directory, and where cache is stored.
let $VIMPATH = fnamemodify(resolve(expand('<sfile>:p')), ':h:h')
let $VARPATH = expand(($XDG_CACHE_HOME ? $XDG_CACHE_HOME : '~/.cache').'/vim')

let g:dein#install_max_processes = 16
let g:dein#install_progress_type = 'echo'
let g:dein#enable_notification = 1
let g:dein#install_log_filename = $VARPATH.'/dein.log'

function! s:dein_load_yaml(filename) abort
	if executable('yaml2json') && exists('*json_decode')
		" Decode YAML using the CLI tool yaml2json
		" See: https://github.com/koraa/large-yaml2json-json2yaml
		let g:denite_plugins = json_decode(
					\ system('yaml2json', readfile(a:filename)))
	else
		" Fallback to use python3 and PyYAML
	python3 << endpython
import vim, yaml
with open(vim.eval('a:filename'), 'r') as f:
	vim.vars['denite_plugins'] = yaml.load(f.read(), Loader=yaml.FullLoader)
endpython
	endif

	for plugin in g:denite_plugins
		call dein#add(plugin['repo'], extend(plugin, {}, 'keep'))
	endfor
	unlet g:denite_plugins
endfunction

function! s:source_file(path, ...) abort
	let use_global = get(a:000, 0, ! has('vim_starting'))
	let abspath = resolve(expand($VIMPATH.'/config/'.a:path))
	if ! use_global
		execute 'source' fnameescape(abspath)
		return
	endif

	let content = map(readfile(abspath),
		\ "substitute(v:val, '^\\W*\\zsset\\ze\\W', 'setglobal', '')")
	let tempfile = tempname()
	try
		call writefile(content, tempfile)
		execute printf('source %s', fnameescape(tempfile))
	finally
		if filereadable(tempfile)
			call delete(tempfile)
		endif
	endtry
endfunction

" Set augroup
augroup MyAutoCmd
	autocmd!
	autocmd CursorHold *? syntax sync minlines=300
augroup END

" Initialize base requirements
if has('vim_starting')
	" Vim Initialization
	" ------------------

	" Global Mappings "{{{
	" Use spacebar as leader and ; as secondary-leader
	" Required before loading plugins!
	let g:mapleader="\<Space>"
	let g:maplocalleader=','

	" }}}
	" Ensure cache directory "{{{
	if ! isdirectory(expand($VARPATH))
		" Create missing dirs i.e. cache/{undo,backup}
		call mkdir(expand('$VARPATH/undo'), 'p')
		call mkdir(expand('$VARPATH/backup'))
	endif

	" Ensure custom spelling directory
	if ! isdirectory(expand('$VIMPATH/spell'))
		call mkdir(expand('$VIMPATH/spell'))
	endif
	" }}}
	" Setup dein {{{
	if &runtimepath !~# '/dein.vim'
		let s:dein_dir = expand('$VARPATH/dein').'/repos/github.com/Shougo/dein.vim'
		if ! isdirectory(s:dein_dir)
			execute '!git clone https://github.com/Shougo/dein.vim' s:dein_dir
		endif

		execute 'set runtimepath+='.substitute(
			\ fnamemodify(s:dein_dir, ':p') , '/$', '', '')
	endif
	" }}}

	" Write history on idle, for sharing among different sessions
	autocmd MyAutoCmd CursorHold * if exists(':rshada') | rshada | wshada | endif

	" Search and use environments specifically made for Neovim.
	if isdirectory($VARPATH.'/venv/neovim2')
		let g:python_host_prog = $VARPATH.'/venv/neovim2/bin/python'
	endif
	if isdirectory($VARPATH.'/venv/neovim3')
		let g:python3_host_prog = $VARPATH.'/venv/neovim3/bin/python'
	endif
endif

" Initialize dein.vim (package manager)
let s:path = expand('$VARPATH/dein')
let s:plugins_path = expand('$VIMPATH/config/plugins.yaml')
if dein#load_state(s:path)
	call dein#begin(s:path, [expand('<sfile>'), s:plugins_path])
	try
		call s:dein_load_yaml(s:plugins_path)
	catch /.*/
		echoerr v:exception
		echomsg 'Error loading config/plugins.yaml...'
		echomsg 'Caught: ' v:exception
		echoerr 'Please run: pip3 install --user PyYAML'
	endtry

	call dein#end()
	call dein#save_state()
	if dein#check_install()
		call dein#install()
	endif
endif

call s:source_file('plugins/all.vim')

filetype plugin indent on
syntax enable

if ! has('vim_starting')
	call dein#call_hook('source')
	call dein#call_hook('post_source')
endif

" Loading configuration modules
call s:source_file('general.vim')
call s:source_file('filetype.vim')
call s:source_file('mappings.vim')
call s:source_file('theme.vim')

set secure

" vim: set ts=2 sw=2 tw=80 noet :
